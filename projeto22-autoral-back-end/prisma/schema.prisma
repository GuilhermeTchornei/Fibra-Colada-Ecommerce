// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  email     String   @db.VarChar(50)
  password  String   @db.VarChar(60)
  phone     String   @db.VarChar(11)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  carts     carts[]
}

model admin {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(100)
  email    String @db.VarChar(50)
  password String @db.VarChar(100)
}

model products {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique @db.VarChar(100)
  products_categories products_categories[]
  products_variations products_variations[]
}

model categories {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique @db.VarChar(20)
  products_categories products_categories[]
}

model products_categories {
  id          Int        @id @default(autoincrement())
  product_id  Int
  product     products   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  category_id Int
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade)
}

model sizes {
  id                  Int                   @id @default(autoincrement())
  size                String                @unique @db.VarChar(10)
  products_variations products_variations[]
}

model stamps {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(20)
  image               String                @db.VarChar()
  products_variations products_variations[]
}

model products_variations {
  id                         Int                          @id @default(autoincrement())
  product_id                 Int
  product                    products                     @relation(fields: [product_id], references: [id], onDelete: Cascade)
  size_id                    Int
  size                       sizes                        @relation(fields: [size_id], references: [id], onDelete: Cascade)
  stamp_id                   Int
  stamp                      stamps                       @relation(fields: [stamp_id], references: [id], onDelete: Cascade)
  price                      Int
  products_variations_images products_variations_images[]
  enabled                    Boolean                      @default(true)
  cart_products              cart_products[]
}

model products_variations_images {
  id                   Int                 @id @default(autoincrement())
  product_variation_id Int
  product_variation    products_variations @relation(fields: [product_variation_id], references: [id], onDelete: Cascade)
  image                String              @unique @db.VarChar()
}

model carts {
  id            Int             @id @default(autoincrement())
  user_id       Int             @unique
  users         users           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  cart_products cart_products[]
}

enum cart_product_status {
  IN_CART
  ORDERED
  FINISHED
  CANCELLED
}

model cart_products {
  id                   Int                 @id @default(autoincrement())
  cart_id              Int
  cart                 carts               @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product_variation_id Int
  product_variation    products_variations @relation(fields: [product_variation_id], references: [id], onDelete: Cascade)
  quantity             Int                 @default(1)
  status               cart_product_status @default(IN_CART)
}
